{"number":"430","title":"Flatten a Multilevel Doubly Linked List","url":"https://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list","difficulty":"Medium","question":"You are given a doubly linked list which in addition to the next and previous pointers, it could have a child pointer, which may or may not point to a separate doubly linked list. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure, as shown in the example below.\n\nFlatten the list so that all the nodes appear in a single-level, doubly linked list. You are given the head of the first level of the list.\n\n&#xA0;\n\nExample:\n\nInput:\n 1---2---3---4---5---6--NULL\n         |\n         7---8---9---10--NULL\n             |\n             11--12--NULL\n\nOutput:\n1-2-3-7-8-11-12-9-10-4-5-6-NULL\n\n\n&#xA0;\n\nExplanation for the above example:\n\nGiven the following multilevel doubly linked list:\n\n\n\n&#xA0;\n\nWe should return the following flattened doubly linked list:\n\n\n","code":"undefined/*// Definition for a Node.public class Node {    public int val;    public Node prev;    public Node next;    public Node child;​    public Node(){}    public Node(int _val,Node _prev,Node _next,Node _child) {        val = _val;        prev = _prev;        next = _next;        child = _child;}*/public class Solution {    public Node Flatten(Node head) {            }}"}