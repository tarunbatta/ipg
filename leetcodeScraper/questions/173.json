{"number":"173","title":"Binary Search Tree Iterator","url":"https://leetcode.com/problems/binary-search-tree-iterator","difficulty":"Medium","question":"Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.\n\nCalling next() will return the next smallest number in the BST.\n\n&#xA0;\n\n\n\n\nExample:\n\n\n\nBSTIterator iterator = new BSTIterator(root);\niterator.next();    // return 3\niterator.next();    // return 7\niterator.hasNext(); // return true\niterator.next();    // return 9\niterator.hasNext(); // return true\niterator.next();    // return 15\niterator.hasNext(); // return true\niterator.next();    // return 20\niterator.hasNext(); // return false\n\n\n&#xA0;\n\nNote:\n\n\n\tnext() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree.\n\tYou may assume that&#xA0;next()&#xA0;call&#xA0;will always be valid, that is, there will be at least a next smallest number in the BST when next() is called.\n\n","code":"undefined/** * Definition for a binary tree node. * public class TreeNode { *     public int val; *     public TreeNode left; *     public TreeNode right; *     public TreeNode(int x) { val = x; } * } */public class BSTIterator {​    public BSTIterator(TreeNode root) {            }        /** @return the next smallest number */    public int Next() {            }        /** @return whether we have a next smallest number */    public bool HasNext() {            }}​/** * Your BSTIterator object will be instantiated and called as such: * BSTIterator obj = new BSTIterator(root); * int param_1 = obj.Next(); * bool param_2 = obj.HasNext(); */"}