{"number":"232","title":"Implement Queue using Stacks","url":"https://leetcode.com/problems/implement-queue-using-stacks","difficulty":"Easy","question":"Implement the following operations of a queue using stacks.\n\n\n\tpush(x) -- Push element x to the back of queue.\n\tpop() -- Removes the element from in front of queue.\n\tpeek() -- Get the front element.\n\tempty() -- Return whether the queue is empty.\n\n\nExample:\n\nMyQueue queue = new MyQueue();\n\nqueue.push(1);\nqueue.push(2);  \nqueue.peek();  // returns 1\nqueue.pop();   // returns 1\nqueue.empty(); // returns false\n\nNotes:\n\n\n\tYou must use only standard operations of a stack -- which means only push to top, peek/pop from top, size, and is empty operations are valid.\n\tDepending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.\n\tYou may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).\n\n","code":"undefinedpublic class MyQueue {​    /** Initialize your data structure here. */    public MyQueue() {            }        /** Push element x to the back of queue. */    public void Push(int x) {            }        /** Removes the element from in front of queue and returns that element. */    public int Pop() {            }        /** Get the front element. */    public int Peek() {            }        /** Returns whether the queue is empty. */    public bool Empty() {            }}​/** * Your MyQueue object will be instantiated and called as such: * MyQueue obj = new MyQueue(); * obj.Push(x); * int param_2 = obj.Pop(); * int param_3 = obj.Peek(); * bool param_4 = obj.Empty(); */"}