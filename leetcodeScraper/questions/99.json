{"number":"99","title":"Recover Binary Search Tree","url":"https://leetcode.com/problems/recover-binary-search-tree","difficulty":"Hard","question":"Two elements of a binary search tree (BST) are swapped by mistake.\n\nRecover the tree without changing its structure.\n\nExample 1:\n\nInput: [1,3,null,null,2]\n\n&#xA0;  1\n&#xA0; /\n&#xA0;3\n&#xA0; \\\n&#xA0;  2\n\nOutput: [3,1,null,null,2]\n\n&#xA0;  3\n&#xA0; /\n&#xA0;1\n&#xA0; \\\n&#xA0;  2\n\n\nExample 2:\n\nInput: [3,1,4,null,null,2]\n\n  3\n / \\\n1   4\n&#xA0;  /\n&#xA0; 2\n\nOutput: [2,1,4,null,null,3]\n\n  2\n / \\\n1   4\n&#xA0;  /\n &#xA0;3\n\n\nFollow up:\n\n\n\tA solution using O(n) space is pretty straight forward.\n\tCould you devise a constant space solution?\n\n","code":"/** * Definition for a binary tree node. * public class TreeNode { *     public int val; *     public TreeNode left; *     public TreeNode right; *     public TreeNode(int x) { val = x; } * } */public class Solution {    public void RecoverTree(TreeNode root) {            }}"}