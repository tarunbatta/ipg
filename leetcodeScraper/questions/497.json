{"number":"497","title":"Random Point in Non-overlapping Rectangles","url":"https://leetcode.com/problems/random-point-in-non-overlapping-rectangles","difficulty":"Medium","question":"Given a list of non-overlapping&#xA0;axis-aligned rectangles rects, write a function pick which randomly and uniformily picks an integer point in the space&#xA0;covered by the rectangles.\n\nNote:\n\n\n\tAn integer point&#xA0;is a point that has integer coordinates.&#xA0;\n\tA point&#xA0;on the perimeter&#xA0;of a rectangle is&#xA0;included in the space covered by the rectangles.&#xA0;\n\tith rectangle = rects[i] =&#xA0;[x1,y1,x2,y2], where [x1, y1]&#xA0;are the integer coordinates of the bottom-left corner, and [x2, y2]&#xA0;are the integer coordinates of the top-right corner.\n\tlength and width of each rectangle does not exceed 2000.\n\t1 &lt;= rects.length&#xA0;&lt;= 100\n\tpick return a point as an array of integer coordinates&#xA0;[p_x, p_y]\n\tpick is called at most 10000&#xA0;times.\n\n\n\nExample 1:\n\nInput: \n[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\n[[[[1,1,5,5]]],[],[],[]]\nOutput: \n[null,[4,1],[4,1],[3,3]]\n\n\n\nExample 2:\n\nInput: \n[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\n[[[[-2,-2,-1,-1],[1,0,3,0]]],[],[],[],[],[]]\nOutput: \n[null,[-1,-2],[2,0],[-2,-1],[3,0],[-2,-2]]\n\n\n\nExplanation of Input Syntax:\n\nThe input is two lists:&#xA0;the subroutines called&#xA0;and their&#xA0;arguments.&#xA0;Solution&apos;s&#xA0;constructor has one argument, the array of rectangles rects. pick&#xA0;has no arguments.&#xA0;Arguments&#xA0;are&#xA0;always wrapped with a list, even if there aren&apos;t any.\n\n\n\n\n&#xA0;\n\n","code":"undefinedpublic class Solution {​    public Solution(int[][] rects) {            }        public int[] Pick() {            }}​/** * Your Solution object will be instantiated and called as such: * Solution obj = new Solution(rects); * int[] param_1 = obj.Pick(); */"}