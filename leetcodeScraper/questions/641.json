{"number":"641","title":"Design Circular Deque","url":"https://leetcode.com/problems/design-circular-deque","difficulty":"Medium","question":"Design your implementation of the circular double-ended queue (deque).\n\nYour implementation should support following operations:\n\n\n\tMyCircularDeque(k): Constructor, set the size of the deque to be k.\n\tinsertFront(): Adds an item at the front of Deque. Return true if the operation is successful.\n\tinsertLast(): Adds an item at the rear of Deque. Return true if the operation is successful.\n\tdeleteFront(): Deletes an item from the front of Deque. Return true if the operation is successful.\n\tdeleteLast(): Deletes an item from the rear of Deque. Return true if the operation is successful.\n\tgetFront(): Gets the front item from the Deque. If the deque is empty, return -1.\n\tgetRear(): Gets the last item from Deque. If the deque is empty, return -1.\n\tisEmpty(): Checks whether Deque is empty or not.&#xA0;\n\tisFull(): Checks whether Deque is full or not.\n\n\n&#xA0;\n\nExample:\n\nMyCircularDeque circularDeque = new MycircularDeque(3); // set the size to be 3\ncircularDeque.insertLast(1);\t\t\t// return true\ncircularDeque.insertLast(2);\t\t\t// return true\ncircularDeque.insertFront(3);\t\t\t// return true\ncircularDeque.insertFront(4);\t\t\t// return false, the queue is full\ncircularDeque.getRear();  \t\t\t// return 2\ncircularDeque.isFull();\t\t\t\t// return true\ncircularDeque.deleteLast();\t\t\t// return true\ncircularDeque.insertFront(4);\t\t\t// return true\ncircularDeque.getFront();\t\t\t// return 4\n\n\n&#xA0;\n\nNote:\n\n\n\tAll values will be in the range of [0, 1000].\n\tThe number of operations will be in the range of&#xA0;[1, 1000].\n\tPlease do not use the built-in Deque library.\n\n","code":"undefinedpublic class MyCircularDeque {​    /** Initialize your data structure here. Set the size of the deque to be k. */    public MyCircularDeque(int k) {            }        /** Adds an item at the front of Deque. Return true if the operation is successful. */    public bool InsertFront(int value) {            }        /** Adds an item at the rear of Deque. Return true if the operation is successful. */    public bool InsertLast(int value) {            }        /** Deletes an item from the front of Deque. Return true if the operation is successful. */    public bool DeleteFront() {            }        /** Deletes an item from the rear of Deque. Return true if the operation is successful. */    public bool DeleteLast() {            }        /** Get the front item from the deque. */    public int GetFront() {            }        /** Get the last item from the deque. */    public int GetRear() {            }        /** Checks whether the circular deque is empty or not. */    public bool IsEmpty() {            }        /** Checks whether the circular deque is full or not. */    public bool IsFull() {            }}​/** * Your MyCircularDeque object will be instantiated and called as such:"}