{"number":"684","title":"Redundant Connection","url":"https://leetcode.com/problems/redundant-connection","difficulty":"Medium","question":"\nIn this problem, a tree is an undirected graph that is connected and has no cycles.\n\nThe given input is a graph that started as a tree with N nodes (with distinct values 1, 2, ..., N), with one additional edge added.  The added edge has two different vertices chosen from 1 to N, and was not an edge that already existed.\n\nThe resulting graph is given as a 2D-array of edges.  Each element of edges is a pair [u, v] with u &lt; v, that represents an undirected edge connecting nodes u and v.\n\nReturn an edge that can be removed so that the resulting graph is a tree of N nodes.  If there are multiple answers, return the answer that occurs last in the given 2D-array.  The answer edge [u, v] should be in the same format, with u &lt; v.\nExample 1:\nInput: [[1,2], [1,3], [2,3]]\nOutput: [2,3]\nExplanation: The given undirected graph will be like this:\n  1\n / \\\n2 - 3\n\n\nExample 2:\nInput: [[1,2], [2,3], [3,4], [1,4], [1,5]]\nOutput: [1,4]\nExplanation: The given undirected graph will be like this:\n5 - 1 - 2\n    |   |\n    4 - 3\n\n\nNote:\nThe size of the input 2D-array will be between 3 and 1000.\nEvery integer represented in the 2D-array will be between 1 and N, where N is the size of the input array.\n\n\n\n\n\nUpdate (2017-09-26):\nWe have overhauled the problem description + test cases and specified clearly the graph is an undirected graph. For the directed graph follow up please see Redundant Connection II). We apologize for any inconvenience caused.\n","code":"undefinedpublic class Solution {    public int[] FindRedundantConnection(int[][] edges) {            }}"}