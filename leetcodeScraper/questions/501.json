{"number":"501","title":"Find Mode in Binary Search Tree","url":"https://leetcode.com/problems/find-mode-in-binary-search-tree","difficulty":"Easy","question":"Given a binary search tree (BST) with duplicates, find all the mode(s) (the most frequently occurred element) in the given BST.\n\nAssume a BST is defined as follows:\n\n\n\tThe left subtree of a node contains only nodes with keys less than or equal to the node&apos;s key.\n\tThe right subtree of a node contains only nodes with keys greater than or equal to the node&apos;s key.\n\tBoth the left and right subtrees must also be binary search trees.\n\n\n&#xA0;\n\nFor example:\nGiven BST [1,null,2,2],\n\n   1\n    \\\n     2\n    /\n   2\n\n\n&#xA0;\n\nreturn [2].\n\nNote: If a tree has more than one mode, you can return them in any order.\n\nFollow up: Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).\n","code":"undefined/** * Definition for a binary tree node. * public class TreeNode { *     public int val; *     public TreeNode left; *     public TreeNode right; *     public TreeNode(int x) { val = x; } * } */public class Solution {    public int[] FindMode(TreeNode root) {            }}"}