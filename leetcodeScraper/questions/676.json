{"number":"676","title":"Implement Magic Dictionary","url":"https://leetcode.com/problems/implement-magic-dictionary","difficulty":"Medium","question":"\nImplement a magic directory with buildDict, and search methods.\n\n\n\nFor the method buildDict, you&apos;ll be given a list of non-repetitive words to build a dictionary.\n\n\n\nFor the method search, you&apos;ll be given a word, and judge whether if you modify exactly one character into another character in this word, the modified word is in the dictionary you just built.\n\n\nExample 1:\nInput: buildDict([&quot;hello&quot;, &quot;leetcode&quot;]), Output: Null\nInput: search(&quot;hello&quot;), Output: False\nInput: search(&quot;hhllo&quot;), Output: True\nInput: search(&quot;hell&quot;), Output: False\nInput: search(&quot;leetcoded&quot;), Output: False\n\n\n\nNote:\n\nYou may assume that all the inputs are consist of lowercase letters a-z.\nFor contest purpose, the test data is rather small by now. You could think about highly efficient algorithm after the contest.\nPlease remember to RESET your class variables declared in class MagicDictionary, as static/class variables are persisted across multiple test cases. Please see here for more details.\n\n","code":"undefinedpublic class MagicDictionary {​    /** Initialize your data structure here. */    public MagicDictionary() {            }        /** Build a dictionary through a list of words */    public void BuildDict(string[] dict) {            }        /** Returns if there is any word in the trie that equals to the given word after modifying exactly one character */    public bool Search(string word) {            }}​/** * Your MagicDictionary object will be instantiated and called as such: * MagicDictionary obj = new MagicDictionary(); * obj.BuildDict(dict); * bool param_2 = obj.Search(word); */"}