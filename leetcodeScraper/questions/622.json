{"number":"622","title":"Design Circular Queue","url":"https://leetcode.com/problems/design-circular-queue","difficulty":"Medium","question":"Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle. It is also called &quot;Ring Buffer&quot;.\n\nOne of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.\n\nYour implementation should support following operations:\n\n\n\tMyCircularQueue(k): Constructor, set the size of the queue to be k.\n\tFront: Get the front item from the queue. If the queue is empty, return -1.\n\tRear: Get the last item from the queue. If the queue is empty, return -1.\n\tenQueue(value): Insert an element into the circular queue. Return true if the operation is successful.\n\tdeQueue(): Delete an element from the circular queue. Return true if the operation is successful.\n\tisEmpty(): Checks whether the circular queue is empty or not.\n\tisFull(): Checks whether the circular queue is full or not.\n\n\n&#xA0;\n\nExample:\n\nMyCircularQueue circularQueue = new MyCircularQueue(3); // set the size to be 3\ncircularQueue.enQueue(1); &#xA0;// return true\ncircularQueue.enQueue(2); &#xA0;// return true\ncircularQueue.enQueue(3); &#xA0;// return true\ncircularQueue.enQueue(4); &#xA0;// return false, the queue is full\ncircularQueue.Rear(); &#xA0;// return 3\ncircularQueue.isFull(); &#xA0;// return true\ncircularQueue.deQueue(); &#xA0;// return true\ncircularQueue.enQueue(4); &#xA0;// return true\ncircularQueue.Rear(); &#xA0;// return 4\n\n&#xA0;\n\nNote:\n\n\n\tAll values will be in the range of [0, 1000].\n\tThe number of operations will be in the range of&#xA0;[1, 1000].\n\tPlease do not use the built-in Queue library.\n\n","code":"undefinedpublic class MyCircularQueue {​    /** Initialize your data structure here. Set the size of the queue to be k. */    public MyCircularQueue(int k) {            }        /** Insert an element into the circular queue. Return true if the operation is successful. */    public bool EnQueue(int value) {            }        /** Delete an element from the circular queue. Return true if the operation is successful. */    public bool DeQueue() {            }        /** Get the front item from the queue. */    public int Front() {            }        /** Get the last item from the queue. */    public int Rear() {            }        /** Checks whether the circular queue is empty or not. */    public bool IsEmpty() {            }        /** Checks whether the circular queue is full or not. */    public bool IsFull() {            }}​/** * Your MyCircularQueue object will be instantiated and called as such: * MyCircularQueue obj = new MyCircularQueue(k); * bool param_1 = obj.EnQueue(value); * bool param_2 = obj.DeQueue(); * int param_3 = obj.Front(); * int param_4 = obj.Rear(); * bool param_5 = obj.IsEmpty(); * bool param_6 = obj.IsFull(); */"}