{"number":"341","title":"Flatten Nested List Iterator","url":"https://leetcode.com/problems/flatten-nested-list-iterator","difficulty":"Medium","question":"Given a nested list of integers, implement an iterator to flatten it.\n\nEach element is either an integer, or a list -- whose elements may also be integers or other lists.\n\nExample 1:\n\n\nInput: [[1,1],2,[1,1]]\nOutput: [1,1,2,1,1]\nExplanation: By calling next repeatedly until hasNext returns false, \n&#xA0;            the order of elements returned by next should be: [1,1,2,1,1].\n\n\nExample 2:\n\nInput: [1,[4,[6]]]\nOutput: [1,4,6]\nExplanation: By calling next repeatedly until hasNext returns false, \n&#xA0;            the order of elements returned by next should be: [1,4,6].\n\n\n\n","code":"undefined/** * // This is the interface that allows for creating nested lists. * // You should not implement it, or speculate about its implementation * interface NestedInteger { * *     // @return true if this NestedInteger holds a single integer, rather than a nested list. *     bool IsInteger(); * *     // @return the single integer that this NestedInteger holds, if it holds a single integer *     // Return null if this NestedInteger holds a nested list *     int GetInteger(); * *     // @return the nested list that this NestedInteger holds, if it holds a nested list *     // Return null if this NestedInteger holds a single integer *     IList<NestedInteger> GetList(); * } */public class NestedIterator {​    public NestedIterator(IList<NestedInteger> nestedList) {            }​    public bool HasNext() {            }​    public int Next() {            }}​/** * Your NestedIterator will be called like this: * NestedIterator i = new NestedIterator(nestedList); * while (i.HasNext()) v[f()] = i.Next(); */"}