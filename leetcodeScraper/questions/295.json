{"number":"295","title":"Find Median from Data Stream","url":"https://leetcode.com/problems/find-median-from-data-stream","difficulty":"Hard","question":"Median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle value.\nFor example,\n\n[2,3,4], the median is 3\n\n[2,3], the median is (2 + 3) / 2 = 2.5\n\nDesign a data structure that supports the following two operations:\n\n\n\tvoid addNum(int num) - Add a integer number from the data stream to the data structure.\n\tdouble findMedian() - Return the median of all elements so far.\n\n\n&#xA0;\n\nExample:\n\naddNum(1)\naddNum(2)\nfindMedian() -&gt; 1.5\naddNum(3) \nfindMedian() -&gt; 2\n\n\n&#xA0;\n\nFollow up:\n\n\n\tIf all integer numbers from the stream are between 0&#xA0;and 100, how would you optimize it?\n\tIf 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?\n\n","code":"undefinedpublic class MedianFinder {​    /** initialize your data structure here. */    public MedianFinder() {            }        public void AddNum(int num) {            }        public double FindMedian() {            }}​/** * Your MedianFinder object will be instantiated and called as such: * MedianFinder obj = new MedianFinder(); * obj.AddNum(num); * double param_2 = obj.FindMedian(); */"}