{"number":"385","title":"Mini Parser","url":"https://leetcode.com/problems/mini-parser","difficulty":"Medium","question":"Given a nested list of integers represented as a string, implement a parser to deserialize it.\n\nEach element is either an integer, or a list -- whose elements may also be integers or other lists.\n\nNote:\nYou may assume that the string is well-formed:\n\nString is non-empty.\nString does not contain white spaces.\nString contains only digits 0-9, [, - ,, ].\n\n\n\nExample 1:\nGiven s = &quot;324&quot;,\n\nYou should return a NestedInteger object which contains a single integer 324.\n\n\n\nExample 2:\nGiven s = &quot;[123,[456,[789]]]&quot;,\n\nReturn a NestedInteger object containing a nested list with 2 elements:\n\n1. An integer containing value 123.\n2. A nested list containing two elements:\n    i.  An integer containing value 456.\n    ii. A nested list with one element:\n         a. An integer containing value 789.\n\n","code":"undefined/** * // This is the interface that allows for creating nested lists. * // You should not implement it, or speculate about its implementation * interface NestedInteger { * *     // Constructor initializes an empty nested list. *     public NestedInteger(); * *     // Constructor initializes a single integer. *     public NestedInteger(int value); * *     // @return true if this NestedInteger holds a single integer, rather than a nested list. *     bool IsInteger(); * *     // @return the single integer that this NestedInteger holds, if it holds a single integer *     // Return null if this NestedInteger holds a nested list *     int GetInteger(); * *     // Set this NestedInteger to hold a single integer. *     public void SetInteger(int value); * *     // Set this NestedInteger to hold a nested list and adds a nested integer to it. *     public void Add(NestedInteger ni); * *     // @return the nested list that this NestedInteger holds, if it holds a nested list *     // Return null if this NestedInteger holds a single integer *     IList<NestedInteger> GetList(); * } */public class Solution {    public NestedInteger Deserialize(string s) {            }}"}