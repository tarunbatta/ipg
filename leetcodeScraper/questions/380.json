{"number":"380","title":"Insert Delete GetRandom O(1)","url":"https://leetcode.com/problems/insert-delete-getrandom-o1","difficulty":"Medium","question":"Design a data structure that supports all following operations in average O(1) time.\n\n\n\ninsert(val): Inserts an item val to the set if not already present.\nremove(val): Removes an item val from the set if present.\ngetRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned.\n\n\n\nExample:\n// Init an empty set.\nRandomizedSet randomSet = new RandomizedSet();\n\n// Inserts 1 to the set. Returns true as 1 was inserted successfully.\nrandomSet.insert(1);\n\n// Returns false as 2 does not exist in the set.\nrandomSet.remove(2);\n\n// Inserts 2 to the set, returns true. Set now contains [1,2].\nrandomSet.insert(2);\n\n// getRandom should return either 1 or 2 randomly.\nrandomSet.getRandom();\n\n// Removes 1 from the set, returns true. Set now contains [2].\nrandomSet.remove(1);\n\n// 2 was already in the set, so return false.\nrandomSet.insert(2);\n\n// Since 2 is the only number in the set, getRandom always return 2.\nrandomSet.getRandom();\n\n","code":"undefinedpublic class RandomizedSet {​    /** Initialize your data structure here. */    public RandomizedSet() {            }        /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */    public bool Insert(int val) {            }        /** Removes a value from the set. Returns true if the set contained the specified element. */    public bool Remove(int val) {            }        /** Get a random element from the set. */    public int GetRandom() {            }}​/** * Your RandomizedSet object will be instantiated and called as such: * RandomizedSet obj = new RandomizedSet(); * bool param_1 = obj.Insert(val); * bool param_2 = obj.Remove(val); * int param_3 = obj.GetRandom(); */"}