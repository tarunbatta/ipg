{"number":"460","title":"LFU Cache","url":"https://leetcode.com/problems/lfu-cache","difficulty":"Hard","question":"Design and implement a data structure for Least Frequently Used (LFU) cache. It should support the following operations: get and put.\n\n\n\nget(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.\nput(key, value) - Set or insert the value if the key is not already present. When the cache reaches its capacity, it should invalidate the least frequently used item before inserting a new item. For the purpose of this problem, when there is a tie (i.e., two or more keys that have the same frequency), the least recently used key would be evicted.\n\n\nFollow up:\nCould you do both operations in O(1) time complexity?\n\nExample:\nLFUCache cache = new LFUCache( 2 /* capacity */ );\n\ncache.put(1, 1);\ncache.put(2, 2);\ncache.get(1);       // returns 1\ncache.put(3, 3);    // evicts key 2\ncache.get(2);       // returns -1 (not found)\ncache.get(3);       // returns 3.\ncache.put(4, 4);    // evicts key 1.\ncache.get(1);       // returns -1 (not found)\ncache.get(3);       // returns 3\ncache.get(4);       // returns 4\n\n","code":"undefinedpublic class LFUCache {​    public LFUCache(int capacity) {            }        public int Get(int key) {            }        public void Put(int key, int value) {            }}​/** * Your LFUCache object will be instantiated and called as such: * LFUCache obj = new LFUCache(capacity); * int param_1 = obj.Get(key); * obj.Put(key,value); */"}