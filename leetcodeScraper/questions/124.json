{"number":"124","title":"Binary Tree Maximum Path Sum","url":"https://leetcode.com/problems/binary-tree-maximum-path-sum","difficulty":"Hard","question":"Given a non-empty binary tree, find the maximum path sum.\n\nFor this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.\n\nExample 1:\n\nInput: [1,2,3]\n\n       1\n      / \\\n     2   3\n\nOutput: 6\n\n\nExample 2:\n\nInput: [-10,9,20,null,null,15,7]\n\n&#xA0;  -10\n&#xA0; &#xA0;/ \\\n&#xA0; 9 &#xA0;20\n&#xA0; &#xA0; / &#xA0;\\\n&#xA0; &#xA0;15 &#xA0; 7\n\nOutput: 42\n\n","code":"undefined/** * Definition for a binary tree node. * public class TreeNode { *     public int val; *     public TreeNode left; *     public TreeNode right; *     public TreeNode(int x) { val = x; } * } */public class Solution {    public int MaxPathSum(TreeNode root) {            }}"}