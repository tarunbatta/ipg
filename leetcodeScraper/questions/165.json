{"number":"165","title":"Compare Version Numbers","url":"https://leetcode.com/problems/compare-version-numbers","difficulty":"Medium","question":"Compare two version numbers version1 and version2.\nIf version1 &gt; version2 return 1;&#xA0;if version1 &lt; version2 return -1;otherwise return 0.\n\nYou may assume that the version strings are non-empty and contain only digits and the . character.\nThe . character does not represent a decimal point and is used to separate number sequences.\nFor instance, 2.5 is not &quot;two and a half&quot; or &quot;half way to version three&quot;, it is the fifth second-level revision of the second first-level revision.\nYou may assume the default revision number for each level of a version number to be 0. For example, version number 3.4 has a revision number of 3 and 4 for its first and second level revision number. Its third and fourth level revision number are both 0.\n\n&#xA0;\n\nExample 1:\nInput: version1 = &quot;0.1&quot;, version2 = &quot;1.1&quot;\nOutput: -1\n\nExample 2:\nInput: version1 = &quot;1.0.1&quot;, version2 = &quot;1&quot;\nOutput: 1\n\nExample 3:\nInput: version1 = &quot;7.5.2.4&quot;, version2 = &quot;7.5.3&quot;\nOutput: -1\n\nExample 4:\nInput: version1 = &quot;1.01&quot;, version2 = &quot;1.001&quot;\nOutput: 0\nExplanation: Ignoring leading zeroes, both &#x201C;01&#x201D; and &#x201C;001&quot; represent the same number &#x201C;1&#x201D;\n\nExample 5:\nInput: version1 = &quot;1.0&quot;, version2 = &quot;1.0.0&quot;\nOutput: 0\nExplanation: The first version number does not have a third level revision number, which means its third level revision number is default to &quot;0&quot;\n\n&#xA0;\n\nNote:\n\nVersion strings are composed of numeric strings separated by dots . and this numeric strings may have leading zeroes. \nVersion strings do not start or end with dots, and they will not be two consecutive dots.\n","code":"undefinedpublic class Solution {    public int CompareVersion(string version1, string version2) {            }}"}