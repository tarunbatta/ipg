{"number":"382","title":"Linked List Random Node","url":"https://leetcode.com/problems/linked-list-random-node","difficulty":"Medium","question":"Given a singly linked list, return a random node&apos;s value from the linked list. Each node must have the same probability of being chosen.\n\nFollow up:\nWhat if the linked list is extremely large and its length is unknown to you? Could you solve this efficiently without using extra space?\n\n\nExample:\n// Init a singly linked list [1,2,3].\nListNode head = new ListNode(1);\nhead.next = new ListNode(2);\nhead.next.next = new ListNode(3);\nSolution solution = new Solution(head);\n\n// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.\nsolution.getRandom();\n\n","code":"undefined/** * Definition for singly-linked list. * public class ListNode { *     public int val; *     public ListNode next; *     public ListNode(int x) { val = x; } * } */public class Solution {​    /** @param head The linked list's head.        Note that the head is guaranteed to be not null, so it contains at least one node. */    public Solution(ListNode head) {            }        /** Returns a random node's value. */    public int GetRandom() {            }}​/** * Your Solution object will be instantiated and called as such: * Solution obj = new Solution(head); * int param_1 = obj.GetRandom(); */"}