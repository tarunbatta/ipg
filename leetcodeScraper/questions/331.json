{"number":"331","title":"Verify Preorder Serialization of a Binary Tree","url":"https://leetcode.com/problems/verify-preorder-serialization-of-a-binary-tree","difficulty":"Medium","question":"One way to serialize a binary tree is to use pre-order traversal. When we encounter a non-null node, we record the node&apos;s value. If it is a null node, we record using a sentinel value such as #.\n\n     _9_\n    /   \\\n   3     2\n  / \\   / \\\n 4   1  #  6\n/ \\ / \\   / \\\n# # # #   # #\n\n\nFor example, the above binary tree can be serialized to the string &quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;, where # represents a null node.\n\nGiven a string of comma separated values, verify whether it is a correct preorder traversal serialization of a binary tree. Find an algorithm without reconstructing the tree.\n\nEach comma separated value in the string must be either an integer or a character &apos;#&apos; representing null pointer.\n\nYou may assume that the input format is always valid, for example it could never contain two consecutive commas such as &quot;1,,3&quot;.\n\nExample 1:\n\nInput: &quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;\nOutput: true\n\nExample 2:\n\nInput: &quot;1,#&quot;\nOutput: false\n\n\nExample 3:\n\nInput: &quot;9,#,#,1&quot;\nOutput: false","code":"undefinedpublic class Solution {    public bool IsValidSerialization(string preorder) {            }}"}